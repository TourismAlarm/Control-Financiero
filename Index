import React, { useState, useRef, useEffect } from 'react';
import { Plus, Trash2, Download, Upload, TrendingUp, TrendingDown, DollarSign, Wallet, PieChart, BarChart3, Target, Edit2, Save, X, Calendar, CreditCard, ShoppingCart, Home, PiggyBank, AlertCircle, CheckCircle } from 'lucide-react';
import { PieChart as RPieChart, Pie, Cell, ResponsiveContainer, BarChart, Bar, XAxis, YAxis, Tooltip, Legend, LineChart, Line, Area, AreaChart } from 'recharts';

export default function ControlFinanciero() {
  const fileInputRef = useRef(null);
  
  // Estado inicial
  const [nombreUsuario, setNombreUsuario] = useState('');
  const [mesActual, setMesActual] = useState(new Date().toLocaleDateString('es-ES', { month: 'long', year: 'numeric' }));
  
  // Estado para notificaciones
  const [notificacion, setNotificacion] = useState({ show: false, mensaje: '', tipo: 'success' });
  
  // Ingresos (múltiples fuentes)
  const [ingresos, setIngresos] = useState([]);
  const [nuevoIngreso, setNuevoIngreso] = useState({ concepto: '', monto: '', tipo: 'Fijo' });
  
  // Gastos fijos mensuales
  const [gastosFijos, setGastosFijos] = useState([]);
  const [nuevoGastoFijo, setNuevoGastoFijo] = useState({ concepto: '', monto: '', categoria: 'Vivienda' });
  
  // Gastos variables (día a día)
  const [gastosVariables, setGastosVariables] = useState([]);
  const [nuevoGastoVariable, setNuevoGastoVariable] = useState({ 
    fecha: new Date().toISOString().split('T')[0], 
    concepto: '', 
    monto: '', 
    categoria: 'Alimentación' 
  });
  
  // Deudas
  const [deudas, setDeudas] = useState([]);
  const [nuevaDeuda, setNuevaDeuda] = useState({ 
    nombre: '', 
    saldoInicial: '', 
    saldoActual: '', 
    cuotaMensual: '', 
    interes: '', 
    fechaFin: '' 
  });
  
  // Objetivos de ahorro
  const [objetivos, setObjetivos] = useState([]);
  const [nuevoObjetivo, setNuevoObjetivo] = useState({ nombre: '', meta: '', actual: '' });
  
  // Vista activa
  const [vistaActiva, setVistaActiva] = useState('inicio');
  const [mostrarBienvenida, setMostrarBienvenida] = useState(true);
  
  // Categorías predefinidas con iconos y colores
  const categorias = [
    { nombre: 'Alimentación', color: '#10b981', icono: '🍽️' },
    { nombre: 'Transporte', color: '#3b82f6', icono: '🚗' },
    { nombre: 'Vivienda', color: '#8b5cf6', icono: '🏠' },
    { nombre: 'Servicios', color: '#f59e0b', icono: '📱' },
    { nombre: 'Ocio', color: '#ec4899', icono: '🎮' },
    { nombre: 'Salud', color: '#ef4444', icono: '💊' },
    { nombre: 'Educación', color: '#14b8a6', icono: '📚' },
    { nombre: 'Ropa', color: '#f97316', icono: '👕' },
    { nombre: 'Deudas', color: '#dc2626', icono: '💳' },
    { nombre: 'Otros', color: '#6b7280', icono: '📦' }
  ];
  
  const COLORS = ['#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6', '#ec4899', '#14b8a6', '#f97316'];
  
  // Función para mostrar notificaciones
  const mostrarNotificacion = (mensaje, tipo = 'success') => {
    setNotificacion({ show: true, mensaje, tipo });
    setTimeout(() => {
      setNotificacion({ show: false, mensaje: '', tipo: 'success' });
    }, 3000);
  };
  
  // Calcular totales
  const totalIngresos = ingresos.reduce((sum, i) => sum + parseFloat(i.monto || 0), 0);
  const totalGastosFijos = gastosFijos.reduce((sum, g) => sum + parseFloat(g.monto || 0), 0);
  const totalGastosVariables = gastosVariables.reduce((sum, g) => sum + parseFloat(g.monto || 0), 0);
  const totalGastos = totalGastosFijos + totalGastosVariables;
  const saldoDisponible = totalIngresos - totalGastos;
  const totalDeudas = deudas.reduce((sum, d) => sum + parseFloat(d.saldoActual || 0), 0);
  const tasaAhorro = totalIngresos > 0 ? ((saldoDisponible / totalIngresos) * 100) : 0;
  
  // Funciones CRUD - Ingresos
  const añadirIngreso = () => {
    if (!nuevoIngreso.concepto || !nuevoIngreso.monto) {
      mostrarNotificacion('Por favor completa todos los campos', 'error');
      return;
    }
    if (parseFloat(nuevoIngreso.monto) <= 0) {
      mostrarNotificacion('El monto debe ser mayor a 0', 'error');
      return;
    }
    
    setIngresos([...ingresos, { 
      id: Date.now(), 
      concepto: nuevoIngreso.concepto, 
      monto: parseFloat(nuevoIngreso.monto),
      tipo: nuevoIngreso.tipo
    }]);
    setNuevoIngreso({ concepto: '', monto: '', tipo: 'Fijo' });
    mostrarNotificacion('Ingreso añadido correctamente', 'success');
  };
  
  const eliminarIngreso = (id) => {
    setIngresos(ingresos.filter(i => i.id !== id));
    mostrarNotificacion('Ingreso eliminado', 'info');
  };
  
  const actualizarIngreso = (id, campo, valor) => {
    setIngresos(ingresos.map(i => 
      i.id === id ? { ...i, [campo]: campo === 'monto' ? parseFloat(valor) || 0 : valor } : i
    ));
  };
  
  // Funciones CRUD - Gastos Fijos
  const añadirGastoFijo = () => {
    if (!nuevoGastoFijo.concepto || !nuevoGastoFijo.monto) {
      mostrarNotificacion('Por favor completa todos los campos', 'error');
      return;
    }
    if (parseFloat(nuevoGastoFijo.monto) <= 0) {
      mostrarNotificacion('El monto debe ser mayor a 0', 'error');
      return;
    }
    
    setGastosFijos([...gastosFijos, {
      id: Date.now(),
      concepto: nuevoGastoFijo.concepto,
      monto: parseFloat(nuevoGastoFijo.monto),
      categoria: nuevoGastoFijo.categoria
    }]);
    setNuevoGastoFijo({ concepto: '', monto: '', categoria: 'Vivienda' });
    mostrarNotificacion('Gasto fijo añadido correctamente', 'success');
  };
  
  const eliminarGastoFijo = (id) => {
    setGastosFijos(gastosFijos.filter(g => g.id !== id));
    mostrarNotificacion('Gasto fijo eliminado', 'info');
  };
  
  const actualizarGastoFijo = (id, campo, valor) => {
    setGastosFijos(gastosFijos.map(g => 
      g.id === id ? { ...g, [campo]: campo === 'monto' ? parseFloat(valor) || 0 : valor } : g
    ));
  };
  
  // Funciones CRUD - Gastos Variables
  const añadirGastoVariable = () => {
    if (!nuevoGastoVariable.concepto || !nuevoGastoVariable.monto || !nuevoGastoVariable.fecha) {
      mostrarNotificacion('Por favor completa todos los campos', 'error');
      return;
    }
    if (parseFloat(nuevoGastoVariable.monto) <= 0) {
      mostrarNotificacion('El monto debe ser mayor a 0', 'error');
      return;
    }
    
    setGastosVariables([...gastosVariables, {
      id: Date.now(),
      fecha: nuevoGastoVariable.fecha,
      concepto: nuevoGastoVariable.concepto,
      monto: parseFloat(nuevoGastoVariable.monto),
      categoria: nuevoGastoVariable.categoria
    }]);
    setNuevoGastoVariable({ 
      fecha: new Date().toISOString().split('T')[0], 
      concepto: '', 
      monto: '', 
      categoria: 'Alimentación' 
    });
    mostrarNotificacion('Gasto registrado correctamente', 'success');
  };
  
  const eliminarGastoVariable = (id) => {
    setGastosVariables(gastosVariables.filter(g => g.id !== id));
    mostrarNotificacion('Gasto eliminado', 'info');
  };
  
  // Funciones CRUD - Deudas
  const añadirDeuda = () => {
    if (!nuevaDeuda.nombre || !nuevaDeuda.saldoActual) {
      mostrarNotificacion('Por favor completa al menos el nombre y saldo actual', 'error');
      return;
    }
    
    setDeudas([...deudas, {
      id: Date.now(),
      nombre: nuevaDeuda.nombre,
      saldoInicial: parseFloat(nuevaDeuda.saldoInicial) || parseFloat(nuevaDeuda.saldoActual),
      saldoActual: parseFloat(nuevaDeuda.saldoActual),
      cuotaMensual: parseFloat(nuevaDeuda.cuotaMensual) || 0,
      interes: parseFloat(nuevaDeuda.interes) || 0,
      fechaFin: nuevaDeuda.fechaFin || 'Sin definir'
    }]);
    setNuevaDeuda({ nombre: '', saldoInicial: '', saldoActual: '', cuotaMensual: '', interes: '', fechaFin: '' });
    mostrarNotificacion('Deuda añadida correctamente', 'success');
  };
  
  const eliminarDeuda = (id) => {
    setDeudas(deudas.filter(d => d.id !== id));
    mostrarNotificacion('Deuda eliminada', 'info');
  };
  
  const actualizarDeuda = (id, campo, valor) => {
    setDeudas(deudas.map(d => 
      d.id === id ? { ...d, [campo]: ['saldoInicial', 'saldoActual', 'cuotaMensual', 'interes'].includes(campo) 
        ? parseFloat(valor) || 0 : valor } : d
    ));
  };
  
  // Funciones CRUD - Objetivos
  const añadirObjetivo = () => {
    if (!nuevoObjetivo.nombre || !nuevoObjetivo.meta) {
      mostrarNotificacion('Por favor completa el nombre y la meta', 'error');
      return;
    }
    if (parseFloat(nuevoObjetivo.meta) <= 0) {
      mostrarNotificacion('La meta debe ser mayor a 0', 'error');
      return;
    }
    
    setObjetivos([...objetivos, {
      id: Date.now(),
      nombre: nuevoObjetivo.nombre,
      meta: parseFloat(nuevoObjetivo.meta),
      actual: parseFloat(nuevoObjetivo.actual) || 0,
      color: COLORS[objetivos.length % COLORS.length]
    }]);
    setNuevoObjetivo({ nombre: '', meta: '', actual: '' });
    mostrarNotificacion('Objetivo creado correctamente', 'success');
  };
  
  const eliminarObjetivo = (id) => {
    setObjetivos(objetivos.filter(o => o.id !== id));
    mostrarNotificacion('Objetivo eliminado', 'info');
  };
  
  const actualizarObjetivo = (id, actual) => {
    setObjetivos(objetivos.map(o => 
      o.id === id ? { ...o, actual: parseFloat(actual) || 0 } : o
    ));
  };
  
  // Estadísticas por categoría
  const gastosPorCategoria = gastosVariables.reduce((acc, gasto) => {
    acc[gasto.categoria] = (acc[gasto.categoria] || 0) + gasto.monto;
    return acc;
  }, {});
  
  const dataPieChart = Object.entries(gastosPorCategoria).map(([nombre, value]) => {
    const cat = categorias.find(c => c.nombre === nombre);
    return {
      name: nombre,
      value: value,
      color: cat?.color || '#6b7280',
      icono: cat?.icono || '📦'
    };
  });
  
  // Datos para gráfico de tendencia (últimos 7 días)
  const obtenerTendenciaGastos = () => {
    const hoy = new Date();
    const dias = [];
    for (let i = 6; i >= 0; i--) {
      const fecha = new Date(hoy);
      fecha.setDate(fecha.getDate() - i);
      const fechaStr = fecha.toISOString().split('T')[0];
      const gastosDia = gastosVariables
        .filter(g => g.fecha === fechaStr)
        .reduce((sum, g) => sum + g.monto, 0);
      dias.push({
        dia: fecha.toLocaleDateString('es-ES', { weekday: 'short' }),
        gastos: gastosDia
      });
    }
    return dias;
  };
  
  // Exportar datos
  const exportarDatos = () => {
    const datos = {
      nombreUsuario,
      mesActual,
      ingresos,
      gastosFijos,
      gastosVariables,
      deudas,
      objetivos,
      totales: {
        totalIngresos,
        totalGastosFijos,
        totalGastosVariables,
        totalGastos,
        saldoDisponible,
        totalDeudas
      },
      fechaExportacion: new Date().toISOString()
    };
    
    const dataStr = JSON.stringify(datos, null, 2);
    const dataBlob = new Blob([dataStr], { type: 'application/json' });
    const url = URL.createObjectURL(dataBlob);
    const link = document.createElement('a');
    link.href = url;
    const nombreArchivo = `control-financiero-${mesActual.replace(/\s/g, '-')}-${Date.now()}.json`;
    link.download = nombreArchivo;
    link.click();
    mostrarNotificacion('Datos exportados correctamente', 'success');
  };
  
  // Importar datos
  const importarDatos = (event) => {
    const file = event.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        try {
          const datos = JSON.parse(e.target.result);
          setNombreUsuario(datos.nombreUsuario || '');
          setMesActual(datos.mesActual || '');
          setIngresos(datos.ingresos || []);
          setGastosFijos(datos.gastosFijos || []);
          setGastosVariables(datos.gastosVariables || []);
          setDeudas(datos.deudas || []);
          setObjetivos(datos.objetivos || []);
          mostrarNotificacion('Datos importados correctamente', 'success');
          setMostrarBienvenida(false);
        } catch (error) {
          mostrarNotificacion('Error al importar. Verifica que sea un archivo válido', 'error');
        }
      };
      reader.readAsText(file);
    }
  };
  
  // Auto-hide bienvenida si hay datos
  useEffect(() => {
    if (ingresos.length > 0 || gastosFijos.length > 0) {
      setMostrarBienvenida(false);
    }
  }, [ingresos, gastosFijos]);

  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-900 p-2 sm:p-4">
      {/* Notificaciones */}
      {notificacion.show && (
        <div className={`fixed top-4 right-4 z-50 animate-pulse transition-all duration-300 ${
          notificacion.tipo === 'success' ? 'bg-green-500' :
          notificacion.tipo === 'error' ? 'bg-red-500' :
          'bg-blue-500'
        } text-white px-6 py-3 rounded-lg shadow-lg flex items-center gap-2`}>
          {notificacion.tipo === 'success' ? <CheckCircle size={20} /> :
           notificacion.tipo === 'error' ? <AlertCircle size={20} /> :
           <AlertCircle size={20} />}
          {notificacion.mensaje}
        </div>
      )}
      
      {/* Bienvenida inicial */}
      {mostrarBienvenida && (
        <div className="fixed inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-3xl shadow-2xl max-w-md w-full p-8 transform transition-all animate-pulse">
            <div className="text-center mb-6">
              <div className="text-7xl mb-4 animate-bounce">💰</div>
              <h2 className="text-3xl font-bold bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent mb-2">
                ¡Bienvenido!
              </h2>
              <p className="text-gray-600">
                Toma el control de tus finanzas personales
              </p>
            </div>
            
            <div className="space-y-4 mb-6">
              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">Tu nombre:</label>
                <input
                  type="text"
                  value={nombreUsuario}
                  onChange={(e) => setNombreUsuario(e.target.value)}
                  placeholder="Ej: María"
                  className="w-full border-2 border-gray-300 rounded-xl px-4 py-3 focus:border-purple-500 outline-none transition-colors"
                />
              </div>
              
              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">Mes actual:</label>
                <input
                  type="text"
                  value={mesActual}
                  onChange={(e) => setMesActual(e.target.value)}
                  placeholder="Ej: Octubre 2025"
                  className="w-full border-2 border-gray-300 rounded-xl px-4 py-3 focus:border-purple-500 outline-none transition-colors"
                />
              </div>
            </div>
            
            <button
              onClick={() => setMostrarBienvenida(false)}
              className="w-full bg-gradient-to-r from-indigo-600 to-purple-600 text-white py-3 rounded-xl font-bold hover:from-indigo-700 hover:to-purple-700 transition-all transform hover:scale-105"
            >
              Comenzar
            </button>
            
            <div className="mt-4 text-center">
              <button
                onClick={() => fileInputRef.current.click()}
                className="text-purple-600 text-sm hover:underline flex items-center justify-center gap-2 mx-auto"
              >
                <Upload size={16} /> Importar datos existentes
              </button>
            </div>
          </div>
        </div>
      )}
      
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="bg-white/95 backdrop-blur-lg rounded-3xl shadow-2xl overflow-hidden mb-6">
          <div className="bg-gradient-to-r from-indigo-600 via-purple-600 to-pink-600 p-6 text-white">
            <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
              <div className="w-full sm:w-auto">
                <h1 className="text-3xl font-bold mb-2 flex items-center gap-2">
                  <PiggyBank size={32} />
                  {nombreUsuario ? `Hola, ${nombreUsuario}` : 'Control Financiero'}
                </h1>
                <div className="flex items-center gap-2">
                  <Calendar size={18} />
                  <span className="text-white/90">{mesActual}</span>
                </div>
              </div>
              <div className="flex gap-2 w-full sm:w-auto">
                <button
                  onClick={() => fileInputRef.current.click()}
                  className="flex-1 sm:flex-none bg-white/20 hover:bg-white/30 backdrop-blur border border-white/30 px-4 py-2 rounded-xl flex items-center justify-center gap-2 transition-all hover:scale-105"
                >
                  <Upload size={18} />
                  <span>Importar</span>
                </button>
                <button
                  onClick={exportarDatos}
                  className="flex-1 sm:flex-none bg-white/20 hover:bg-white/30 backdrop-blur border border-white/30 px-4 py-2 rounded-xl flex items-center justify-center gap-2 transition-all hover:scale-105"
                >
                  <Download size={18} />
                  <span>Exportar</span>
                </button>
                <input
                  ref={fileInputRef}
                  type="file"
                  accept=".json"
                  onChange={importarDatos}
                  className="hidden"
                />
              </div>
            </div>
          </div>

          {/* Navigation */}
          <div className="flex overflow-x-auto border-b bg-gray-50">
            {[
              { id: 'inicio', icon: <Home size={18} />, label: 'Inicio' },
              { id: 'ingresos', icon: <TrendingUp size={18} />, label: 'Ingresos' },
              { id: 'gastos-fijos', icon: <CreditCard size={18} />, label: 'Gastos Fijos' },
              { id: 'gastos-diarios', icon: <ShoppingCart size={18} />, label: 'Gastos Diarios' },
              { id: 'deudas', icon: <Wallet size={18} />, label: 'Deudas' },
              { id: 'objetivos', icon: <Target size={18} />, label: 'Objetivos' },
              { id: 'estadisticas', icon: <BarChart3 size={18} />, label: 'Estadísticas' }
            ].map(vista => (
              <button
                key={vista.id}
                onClick={() => setVistaActiva(vista.id)}
                className={`flex-1 min-w-fit px-4 sm:px-6 py-4 font-semibold transition-all flex items-center justify-center gap-2 ${
                  vistaActiva === vista.id 
                    ? 'bg-white text-purple-600 border-b-3 border-purple-600 shadow-sm' 
                    : 'text-gray-600 hover:bg-white hover:text-gray-800'
                }`}
              >
                {vista.icon}
                <span className="hidden sm:inline">{vista.label}</span>
              </button>
            ))}
          </div>
        </div>

        {/* VISTA INICIO */}
        {vistaActiva === 'inicio' && (
          <>
            {/* Métricas principales */}
            <div className="grid grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
              <div className="bg-white/95 backdrop-blur rounded-2xl shadow-xl p-6 transform transition-all hover:scale-105">
                <div className="flex items-center justify-between mb-2">
                  <h3 className="text-sm font-semibold text-gray-600">INGRESOS</h3>
                  <div className="bg-green-100 p-2 rounded-lg">
                    <TrendingUp className="text-green-600" size={20} />
                  </div>
                </div>
                <p className="text-3xl font-bold text-green-600">{totalIngresos.toFixed(2)} €</p>
                <p className="text-xs text-gray-500 mt-1">{ingresos.length} fuente(s)</p>
              </div>

              <div className="bg-white/95 backdrop-blur rounded-2xl shadow-xl p-6 transform transition-all hover:scale-105">
                <div className="flex items-center justify-between mb-2">
                  <h3 className="text-sm font-semibold text-gray-600">GASTOS</h3>
                  <div className="bg-red-100 p-2 rounded-lg">
                    <TrendingDown className="text-red-600" size={20} />
                  </div>
                </div>
                <p className="text-3xl font-bold text-red-600">{totalGastos.toFixed(2)} €</p>
                <p className="text-xs text-gray-500 mt-1">Total del mes</p>
              </div>

              <div className="bg-white/95 backdrop-blur rounded-2xl shadow-xl p-6 transform transition-all hover:scale-105">
                <div className="flex items-center justify-between mb-2">
                  <h3 className="text-sm font-semibold text-gray-600">BALANCE</h3>
                  <div className={`${saldoDisponible >= 0 ? 'bg-blue-100' : 'bg-orange-100'} p-2 rounded-lg`}>
                    <DollarSign className={saldoDisponible >= 0 ? "text-blue-600" : "text-orange-600"} size={20} />
                  </div>
                </div>
                <p className={`text-3xl font-bold ${saldoDisponible >= 0 ? "text-blue-600" : "text-orange-600"}`}>
                  {saldoDisponible >= 0 ? '+' : ''}{saldoDisponible.toFixed(2)} €
                </p>
                <p className="text-xs text-gray-500 mt-1">
                  {tasaAhorro >= 0 ? `${tasaAhorro.toFixed(1)}% ahorro` : 'Déficit'}
                </p>
              </div>

              <div className="bg-white/95 backdrop-blur rounded-2xl shadow-xl p-6 transform transition-all hover:scale-105">
                <div className="flex items-center justify-between mb-2">
                  <h3 className="text-sm font-semibold text-gray-600">DEUDAS</h3>
                  <div className="bg-orange-100 p-2 rounded-lg">
                    <CreditCard className="text-orange-600" size={20} />
                  </div>
                </div>
                <p className="text-3xl font-bold text-orange-600">{totalDeudas.toFixed(0)} €</p>
                <p className="text-xs text-gray-500 mt-1">{deudas.length} activa(s)</p>
              </div>
            </div>

            {/* Resumen y gráficos */}
            <div className="grid lg:grid-cols-2 gap-6">
              {/* Tendencia de gastos */}
              <div className="bg-white/95 backdrop-blur rounded-2xl shadow-xl p-6">
                <h3 className="text-lg font-bold text-gray-800 mb-4 flex items-center gap-2">
                  <BarChart3 className="text-purple-600" size={20} />
                  Tendencia Semanal
                </h3>
                {gastosVariables.length === 0 ? (
                  <div className="text-center py-8 text-gray-500">
                    <BarChart3 size={48} className="mx-auto mb-4 opacity-30" />
                    <p>Registra gastos para ver tendencias</p>
                  </div>
                ) : (
                  <ResponsiveContainer width="100%" height={200}>
                    <AreaChart data={obtenerTendenciaGastos()}>
                      <defs>
                        <linearGradient id="colorGastos" x1="0" y1="0" x2="0" y2="1">
                          <stop offset="5%" stopColor="#8b5cf6" stopOpacity={0.8}/>
                          <stop offset="95%" stopColor="#8b5cf6" stopOpacity={0}/>
                        </linearGradient>
                      </defs>
                      <XAxis dataKey="dia" />
                      <YAxis />
                      <Tooltip formatter={(value) => `${value} €`} />
                      <Area 
                        type="monotone" 
                        dataKey="gastos" 
                        stroke="#8b5cf6" 
                        fill="url(#colorGastos)"
                        strokeWidth={2}
                      />
                    </AreaChart>
                  </ResponsiveContainer>
                )}
              </div>

              {/* Estado de objetivos */}
              <div className="bg-white/95 backdrop-blur rounded-2xl shadow-xl p-6">
                <h3 className="text-lg font-bold text-gray-800 mb-4 flex items-center gap-2">
                  <Target className="text-purple-600" size={20} />
                  Progreso de Objetivos
                </h3>
                {objetivos.length === 0 ? (
                  <div className="text-center py-8 text-gray-500">
                    <Target size={48} className="mx-auto mb-4 opacity-30" />
                    <p>Define objetivos de ahorro</p>
                    <button 
                      onClick={() => setVistaActiva('objetivos')}
                      className="mt-3 text-purple-600 hover:underline text-sm"
                    >
                      Crear primer objetivo →
                    </button>
                  </div>
                ) : (
                  <div className="space-y-3">
                    {objetivos.slice(0, 3).map(obj => {
                      const progreso = (obj.actual / obj.meta) * 100;
                      return (
                        <div key={obj.id} className="bg-gray-50 rounded-xl p-3">
                          <div className="flex justify-between items-center mb-2">
                            <span className="font-semibold text-sm">{obj.nombre}</span>
                            <span className="text-xs font-bold" style={{ color: obj.color }}>
                              {progreso.toFixed(0)}%
                            </span>
                          </div>
                          <div className="w-full bg-gray-200 rounded-full h-2">
                            <div
                              className="h-2 rounded-full transition-all duration-500"
                              style={{ 
                                width: `${Math.min(progreso, 100)}%`, 
                                backgroundColor: obj.color 
                              }}
                            />
                          </div>
                        </div>
                      );
                    })}
                    {objetivos.length > 3 && (
                      <button 
                        onClick={() => setVistaActiva('objetivos')}
                        className="text-purple-600 hover:underline text-sm"
                      >
                        Ver todos ({objetivos.length}) →
                      </button>
                    )}
                  </div>
                )}
              </div>
            </div>

            {/* Tips financieros */}
            <div className="bg-gradient-to-r from-purple-600 to-pink-600 rounded-2xl shadow-xl p-6 mt-6 text-white">
              <h3 className="text-xl font-bold mb-4 flex items-center gap-2">
                <AlertCircle size={24} />
                Consejos Financieros
              </h3>
              <div className="grid sm:grid-cols-2 lg:grid-cols-3 gap-4">
                <div className="bg-white/20 backdrop-blur rounded-xl p-4">
                  <div className="text-2xl mb-2">💡</div>
                  <p className="text-sm">
                    {tasaAhorro < 10 ? 
                      'Intenta ahorrar al menos el 10% de tus ingresos' :
                      `¡Excelente! Estás ahorrando el ${tasaAhorro.toFixed(0)}% de tus ingresos`
                    }
                  </p>
                </div>
                <div className="bg-white/20 backdrop-blur rounded-xl p-4">
                  <div className="text-2xl mb-2">📊</div>
                  <p className="text-sm">
                    {gastosVariables.length < 5 ?
                      'Registra todos tus gastos para tener un control real' :
                      'Buen trabajo registrando tus gastos diarios'
                    }
                  </p>
                </div>
                <div className="bg-white/20 backdrop-blur rounded-xl p-4">
                  <div className="text-2xl mb-2">🎯</div>
                  <p className="text-sm">
                    {objetivos.length === 0 ?
                      'Define objetivos de ahorro para mantenerte motivado' :
                      `Tienes ${objetivos.length} objetivo(s) en progreso`
                    }
                  </p>
                </div>
              </div>
            </div>
          </>
        )}

        {/* VISTA INGRESOS */}
        {vistaActiva === 'ingresos' && (
          <div className="bg-white/95 backdrop-blur rounded-2xl shadow-xl p-6">
            <h2 className="text-2xl font-bold text-gray-800 mb-6 flex items-center gap-2">
              <TrendingUp className="text-green-600" size={28} />
              Gestión de Ingresos
            </h2>
            
            {/* Formulario */}
            <div className="bg-gradient-to-r from-green-50 to-emerald-50 rounded-xl p-5 mb-6 border border-green-200">
              <h3 className="font-semibold text-gray-800 mb-4">Añadir Nuevo Ingreso</h3>
              <div className="grid sm:grid-cols-4 gap-3">
                <input
                  type="text"
                  placeholder="Concepto (Ej: Nómina)"
                  value={nuevoIngreso.concepto}
                  onChange={(e) => setNuevoIngreso({...nuevoIngreso, concepto: e.target.value})}
                  className="border-2 border-green-300 rounded-xl px-4 py-2 focus:border-green-500 focus:outline-none transition-colors"
                />
                <input
                  type="number"
                  placeholder="Monto €"
                  value={nuevoIngreso.monto}
                  onChange={(e) => setNuevoIngreso({...nuevoIngreso, monto: e.target.value})}
                  className="border-2 border-green-300 rounded-xl px-4 py-2 focus:border-green-500 focus:outline-none transition-colors"
                />
                <select
                  value={nuevoIngreso.tipo}
                  onChange={(e) => setNuevoIngreso({...nuevoIngreso, tipo: e.target.value})}
                  className="border-2 border-green-300 rounded-xl px-4 py-2 focus:border-green-500 focus:outline-none transition-colors"
                >
                  <option value="Fijo">Fijo (mensual)</option>
                  <option value="Variable">Variable</option>
                  <option value="Extra">Extra (ocasional)</option>
                </select>
                <button
                  onClick={añadirIngreso}
                  className="bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 text-white rounded-xl px-4 py-2 flex items-center justify-center gap-2 font-semibold transition-all transform hover:scale-105"
                >
                  <Plus size={20} /> Añadir
                </button>
              </div>
            </div>

            {/* Lista de ingresos */}
            {ingresos.length === 0 ? (
              <div className="text-center py-16 text-gray-500">
                <DollarSign size={64} className="mx-auto mb-4 opacity-20" />
                <p className="text-lg">No tienes ingresos registrados</p>
                <p className="text-sm mt-2">Añade tu primer ingreso para empezar</p>
              </div>
            ) : (
              <div className="overflow-x-auto">
                <table className="w-full">
                  <thead>
                    <tr className="border-b-2 border-gray-200">
                      <th className="text-left px-4 py-3 font-semibold text-gray-700">Concepto</th>
                      <th className="text-left px-4 py-3 font-semibold text-gray-700">Tipo</th>
                      <th className="text-right px-4 py-3 font-semibold text-gray-700">Monto</th>
                      <th className="text-center px-4 py-3 font-semibold text-gray-700">Acciones</th>
                    </tr>
                  </thead>
                  <tbody>
                    {ingresos.map(i => (
                      <tr key={i.id} className="border-b hover:bg-gray-50 transition-colors">
                        <td className="px-4 py-3">
                          <input
                            type="text"
                            value={i.concepto}
                            onChange={(e) => actualizarIngreso(i.id, 'concepto', e.target.value)}
                            className="border-b-2 border-transparent hover:border-gray-300 focus:border-green-500 outline-none w-full bg-transparent"
                          />
                        </td>
                        <td className="px-4 py-3">
                          <span className={`px-3 py-1 rounded-full text-xs font-semibold ${
                            i.tipo === 'Fijo' ? 'bg-green-100 text-green-800' :
                            i.tipo === 'Variable' ? 'bg-yellow-100 text-yellow-800' :
                            'bg-blue-100 text-blue-800'
                          }`}>
                            {i.tipo}
                          </span>
                        </td>
                        <td className="px-4 py-3 text-right">
                          <div className="flex items-center justify-end gap-1">
                            <input
                              type="number"
                              value={i.monto}
                              onChange={(e) => actualizarIngreso(i.id, 'monto', e.target.value)}
                              className="text-right font-bold border-b-2 border-transparent hover:border-gray-300 focus:border-green-500 outline-none w-24 bg-transparent"
                            />
                            <span className="font-bold">€</span>
                          </div>
                        </td>
                        <td className="px-4 py-3 text-center">
                          <button
                            onClick={() => eliminarIngreso(i.id)}
                            className="text-red-500 hover:text-red-700 hover:bg-red-50 p-2 rounded-lg transition-all"
                          >
                            <Trash2 size={18} />
                          </button>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                  <tfoot>
                    <tr className="bg-gradient-to-r from-green-50 to-emerald-50 font-bold">
                      <td className="px-4 py-4" colSpan="2">TOTAL INGRESOS</td>
                      <td className="px-4 py-4 text-right text-2xl text-green-600">{totalIngresos.toFixed(2)} €</td>
                      <td></td>
                    </tr>
                  </tfoot>
                </table>
              </div>
            )}
          </div>
        )}

        {/* VISTA GASTOS FIJOS */}
        {vistaActiva === 'gastos-fijos' && (
          <div className="bg-white/95 backdrop-blur rounded-2xl shadow-xl p-6">
            <h2 className="text-2xl font-bold text-gray-800 mb-6 flex items-center gap-2">
              <CreditCard className="text-blue-600" size={28} />
              Gastos Fijos Mensuales
            </h2>
            
            <div className="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-xl p-5 mb-6 border border-blue-200">
              <h3 className="font-semibold text-gray-800 mb-4">Añadir Gasto Fijo</h3>
              <div className="grid sm:grid-cols-4 gap-3">
                <input
                  type="text"
                  placeholder="Concepto (Ej: Alquiler)"
                  value={nuevoGastoFijo.concepto}
                  onChange={(e) => setNuevoGastoFijo({...nuevoGastoFijo, concepto: e.target.value})}
                  className="border-2 border-blue-300 rounded-xl px-4 py-2 focus:border-blue-500 focus:outline-none transition-colors"
                />
                <input
                  type="number"
                  placeholder="Monto €"
                  value={nuevoGastoFijo.monto}
                  onChange={(e) => setNuevoGastoFijo({...nuevoGastoFijo, monto: e.target.value})}
                  className="border-2 border-blue-300 rounded-xl px-4 py-2 focus:border-blue-500 focus:outline-none transition-colors"
                />
                <select
                  value={nuevoGastoFijo.categoria}
                  onChange={(e) => setNuevoGastoFijo({...nuevoGastoFijo, categoria: e.target.value})}
                  className="border-2 border-blue-300 rounded-xl px-4 py-2 focus:border-blue-500 focus:outline-none transition-colors"
                >
                  {categorias.map(cat => (
                    <option key={cat.nombre} value={cat.nombre}>{cat.icono} {cat.nombre}</option>
                  ))}
                </select>
                <button
                  onClick={añadirGastoFijo}
                  className="bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white rounded-xl px-4 py-2 flex items-center justify-center gap-2 font-semibold transition-all transform hover:scale-105"
                >
                  <Plus size={20} /> Añadir
                </button>
              </div>
            </div>

            {gastosFijos.length === 0 ? (
              <div className="text-center py-16 text-gray-500">
                <CreditCard size={64} className="mx-auto mb-4 opacity-20" />
                <p className="text-lg">No tienes gastos fijos registrados</p>
                <p className="text-sm mt-2">Añade alquiler, préstamos, suscripciones...</p>
              </div>
            ) : (
              <div className="overflow-x-auto">
                <table className="w-full">
                  <thead>
                    <tr className="border-b-2 border-gray-200">
                      <th className="text-left px-4 py-3 font-semibold text-gray-700">Concepto</th>
                      <th className="text-left px-4 py-3 font-semibold text-gray-700">Categoría</th>
                      <th className="text-right px-4 py-3 font-semibold text-gray-700">Monto</th>
                      <th className="text-center px-4 py-3 font-semibold text-gray-700">Acciones</th>
                    </tr>
                  </thead>
                  <tbody>
                    {gastosFijos.map(g => {
                      const cat = categorias.find(c => c.nombre === g.categoria);
                      return (
                        <tr key={g.id} className="border-b hover:bg-gray-50 transition-colors">
                          <td className="px-4 py-3">
                            <input
                              type="text"
                              value={g.concepto}
                              onChange={(e) => actualizarGastoFijo(g.id, 'concepto', e.target.value)}
                              className="border-b-2 border-transparent hover:border-gray-300 focus:border-blue-500 outline-none w-full bg-transparent"
                            />
                          </td>
                          <td className="px-4 py-3">
                            <span 
                              className="px-3 py-1 rounded-full text-xs font-semibold inline-flex items-center gap-1"
                              style={{ backgroundColor: `${cat?.color}20`, color: cat?.color }}
                            >
                              {cat?.icono} {g.categoria}
                            </span>
                          </td>
                          <td className="px-4 py-3 text-right">
                            <div className="flex items-center justify-end gap-1">
                              <input
                                type="number"
                                value={g.monto}
                                onChange={(e) => actualizarGastoFijo(g.id, 'monto', e.target.value)}
                                className="text-right font-bold border-b-2 border-transparent hover:border-gray-300 focus:border-blue-500 outline-none w-24 bg-transparent"
                              />
                              <span className="font-bold">€</span>
                            </div>
                          </td>
                          <td className="px-4 py-3 text-center">
                            <button
                              onClick={() => eliminarGastoFijo(g.id)}
                              className="text-red-500 hover:text-red-700 hover:bg-red-50 p-2 rounded-lg transition-all"
                            >
                              <Trash2 size={18} />
                            </button>
                          </td>
                        </tr>
                      );
                    })}
                  </tbody>
                  <tfoot>
                    <tr className="bg-gradient-to-r from-blue-50 to-indigo-50 font-bold">
                      <td className="px-4 py-4" colSpan="2">TOTAL GASTOS FIJOS</td>
                      <td className="px-4 py-4 text-right text-2xl text-blue-600">{totalGastosFijos.toFixed(2)} €</td>
                      <td></td>
                    </tr>
                  </tfoot>
                </table>
              </div>
            )}
          </div>
        )}

        {/* VISTA GASTOS DIARIOS */}
        {vistaActiva === 'gastos-diarios' && (
          <div className="bg-white/95 backdrop-blur rounded-2xl shadow-xl p-6">
            <h2 className="text-2xl font-bold text-gray-800 mb-6 flex items-center gap-2">
              <ShoppingCart className="text-purple-600" size={28} />
              Gastos Variables del Día a Día
            </h2>
            
            <div className="bg-gradient-to-r from-purple-50 to-pink-50 rounded-xl p-5 mb-6 border border-purple-200">
              <h3 className="font-semibold text-gray-800 mb-4">Registrar Nuevo Gasto</h3>
              <div className="grid sm:grid-cols-5 gap-3">
                <input
                  type="date"
                  value={nuevoGastoVariable.fecha}
                  onChange={(e) => setNuevoGastoVariable({...nuevoGastoVariable, fecha: e.target.value})}
                  className="border-2 border-purple-300 rounded-xl px-4 py-2 focus:border-purple-500 focus:outline-none transition-colors"
                />
                <input
                  type="text"
                  placeholder="Concepto"
                  value={nuevoGastoVariable.concepto}
                  onChange={(e) => setNuevoGastoVariable({...nuevoGastoVariable, concepto: e.target.value})}
                  className="border-2 border-purple-300 rounded-xl px-4 py-2 focus:border-purple-500 focus:outline-none transition-colors"
                />
                <input
                  type="number"
                  placeholder="Monto €"
                  value={nuevoGastoVariable.monto}
                  onChange={(e) => setNuevoGastoVariable({...nuevoGastoVariable, monto: e.target.value})}
                  className="border-2 border-purple-300 rounded-xl px-4 py-2 focus:border-purple-500 focus:outline-none transition-colors"
                />
                <select
                  value={nuevoGastoVariable.categoria}
                  onChange={(e) => setNuevoGastoVariable({...nuevoGastoVariable, categoria: e.target.value})}
                  className="border-2 border-purple-300 rounded-xl px-4 py-2 focus:border-purple-500 focus:outline-none transition-colors"
                >
                  {categorias.map(cat => (
                    <option key={cat.nombre} value={cat.nombre}>{cat.icono} {cat.nombre}</option>
                  ))}
                </select>
                <button
                  onClick={añadirGastoVariable}
                  className="bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white rounded-xl px-4 py-2 flex items-center justify-center gap-2 font-semibold transition-all transform hover:scale-105"
                >
                  <Plus size={20} /> Añadir
                </button>
              </div>
            </div>

            {gastosVariables.length === 0 ? (
              <div className="text-center py-16 text-gray-500">
                <ShoppingCart size={64} className="mx-auto mb-4 opacity-20" />
                <p className="text-lg">No has registrado gastos variables</p>
                <p className="text-sm mt-2">Empieza a anotar cada compra para tener control total</p>
              </div>
            ) : (
              <div className="overflow-x-auto">
                <table className="w-full">
                  <thead>
                    <tr className="border-b-2 border-gray-200">
                      <th className="text-left px-4 py-3 font-semibold text-gray-700">Fecha</th>
                      <th className="text-left px-4 py-3 font-semibold text-gray-700">Concepto</th>
                      <th className="text-left px-4 py-3 font-semibold text-gray-700">Categoría</th>
                      <th className="text-right px-4 py-3 font-semibold text-gray-700">Monto</th>
                      <th className="text-center px-4 py-3 font-semibold text-gray-700">Acciones</th>
                    </tr>
                  </thead>
                  <tbody>
                    {gastosVariables.sort((a, b) => new Date(b.fecha) - new Date(a.fecha)).map(g => {
                      const cat = categorias.find(c => c.nombre === g.categoria);
                      return (
                        <tr key={g.id} className="border-b hover:bg-gray-50 transition-colors">
                          <td className="px-4 py-3">
                            {new Date(g.fecha).toLocaleDateString('es-ES', {
                              day: '2-digit',
                              month: 'short',
                              year: 'numeric'
                            })}
                          </td>
                          <td className="px-4 py-3">{g.concepto}</td>
                          <td className="px-4 py-3">
                            <span 
                              className="px-3 py-1 rounded-full text-xs font-semibold inline-flex items-center gap-1"
                              style={{ backgroundColor: `${cat?.color}20`, color: cat?.color }}
                            >
                              {cat?.icono} {g.categoria}
                            </span>
                          </td>
                          <td className="px-4 py-3 text-right font-bold">{g.monto.toFixed(2)} €</td>
                          <td className="px-4 py-3 text-center">
                            <button
                              onClick={() => eliminarGastoVariable(g.id)}
                              className="text-red-500 hover:text-red-700 hover:bg-red-50 p-2 rounded-lg transition-all"
                            >
                              <Trash2 size={18} />
                            </button>
                          </td>
                        </tr>
                      );
                    })}
                  </tbody>
                  <tfoot>
                    <tr className="bg-gradient-to-r from-purple-50 to-pink-50 font-bold">
                      <td className="px-4 py-4" colSpan="3">TOTAL GASTOS VARIABLES</td>
                      <td className="px-4 py-4 text-right text-2xl text-purple-600">{totalGastosVariables.toFixed(2)} €</td>
                      <td></td>
                    </tr>
                  </tfoot>
                </table>
              </div>
            )}
          </div>
        )}

        {/* VISTA DEUDAS */}
        {vistaActiva === 'deudas' && (
          <div className="bg-white/95 backdrop-blur rounded-2xl shadow-xl p-6">
            <h2 className="text-2xl font-bold text-gray-800 mb-6 flex items-center gap-2">
              <CreditCard className="text-orange-600" size={28} />
              Control de Deudas
            </h2>
            
            <div className="bg-gradient-to-r from-orange-50 to-red-50 rounded-xl p-5 mb-6 border border-orange-200">
              <h3 className="font-semibold text-gray-800 mb-4">Registrar Nueva Deuda</h3>
              <div className="grid sm:grid-cols-3 lg:grid-cols-6 gap-3">
                <input
                  type="text"
                  placeholder="Nombre"
                  value={nuevaDeuda.nombre}
                  onChange={(e) => setNuevaDeuda({...nuevaDeuda, nombre: e.target.value})}
                  className="border-2 border-orange-300 rounded-xl px-4 py-2 focus:border-orange-500 focus:outline-none transition-colors"
                />
                <input
                  type="number"
                  placeholder="Saldo actual €"
                  value={nuevaDeuda.saldoActual}
                  onChange={(e) => setNuevaDeuda({...nuevaDeuda, saldoActual: e.target.value})}
                  className="border-2 border-orange-300 rounded-xl px-4 py-2 focus:border-orange-500 focus:outline-none transition-colors"
                />
                <input
                  type="number"
                  placeholder="Cuota mensual €"
                  value={nuevaDeuda.cuotaMensual}
                  onChange={(e) => setNuevaDeuda({...nuevaDeuda, cuotaMensual: e.target.value})}
                  className="border-2 border-orange-300 rounded-xl px-4 py-2 focus:border-orange-500 focus:outline-none transition-colors"
                />
                <input
                  type="number"
                  placeholder="Interés %"
                  value={nuevaDeuda.interes}
                  onChange={(e) => setNuevaDeuda({...nuevaDeuda, interes: e.target.value})}
                  className="border-2 border-orange-300 rounded-xl px-4 py-2 focus:border-orange-500 focus:outline-none transition-colors"
                />
                <input
                  type="text"
                  placeholder="Fin (MM/AAAA)"
                  value={nuevaDeuda.fechaFin}
                  onChange={(e) => setNuevaDeuda({...nuevaDeuda, fechaFin: e.target.value})}
                  className="border-2 border-orange-300 rounded-xl px-4 py-2 focus:border-orange-500 focus:outline-none transition-colors"
                />
                <button
                  onClick={añadirDeuda}
                  className="bg-gradient-to-r from-orange-600 to-red-600 hover:from-orange-700 hover:to-red-700 text-white rounded-xl px-4 py-2 flex items-center justify-center gap-2 font-semibold transition-all transform hover:scale-105"
                >
                  <Plus size={20} /> Añadir
                </button>
              </div>
            </div>

            {deudas.length === 0 ? (
              <div className="text-center py-16 text-gray-500">
                <CreditCard size={64} className="mx-auto mb-4 opacity-20" />
                <p className="text-lg">No tienes deudas registradas</p>
                <p className="text-sm mt-2">Si tienes préstamos o tarjetas de crédito, regístralos aquí</p>
              </div>
            ) : (
              <div className="grid gap-4">
                {deudas.map(d => (
                  <div key={d.id} className="bg-gradient-to-r from-orange-50 to-red-50 rounded-xl p-5 border border-orange-200">
                    <div className="flex justify-between items-start mb-3">
                      <h3 className="text-lg font-bold text-gray-800">{d.nombre}</h3>
                      <button
                        onClick={() => eliminarDeuda(d.id)}
                        className="text-red-500 hover:text-red-700 hover:bg-red-50 p-2 rounded-lg transition-all"
                      >
                        <Trash2 size={18} />
                      </button>
                    </div>
                    <div className="grid sm:grid-cols-2 lg:grid-cols-4 gap-4">
                      <div>
                        <p className="text-sm text-gray-600">Saldo Actual</p>
                        <div className="flex items-center gap-1">
                          <input
                            type="number"
                            value={d.saldoActual}
                            onChange={(e) => actualizarDeuda(d.id, 'saldoActual', e.target.value)}
                            className="text-lg font-bold text-orange-600 border-b-2 border-transparent hover:border-orange-300 focus:border-orange-500 outline-none bg-transparent"
                          />
                          <span className="text-lg font-bold text-orange-600">€</span>
                        </div>
                      </div>
                      <div>
                        <p className="text-sm text-gray-600">Cuota Mensual</p>
                        <p className="text-lg font-bold">{d.cuotaMensual.toFixed(2)} €</p>
                      </div>
                      <div>
                        <p className="text-sm text-gray-600">Interés</p>
                        <p className="text-lg font-bold">{d.interes}%</p>
                      </div>
                      <div>
                        <p className="text-sm text-gray-600">Finaliza</p>
                        <p className="text-lg font-bold">{d.fechaFin}</p>
                      </div>
                    </div>
                    <div className="mt-3 pt-3 border-t border-orange-200">
                      <div className="flex items-center justify-between text-sm">
                        <span className="text-gray-600">Progreso de pago</span>
                        <span className="font-semibold">
                          {d.saldoInicial > 0 ? 
                            `${(((d.saldoInicial - d.saldoActual) / d.saldoInicial) * 100).toFixed(1)}%` : 
                            '0%'
                          }
                        </span>
                      </div>
                      <div className="mt-2 w-full bg-gray-200 rounded-full h-2">
                        <div
                          className="h-2 rounded-full bg-gradient-to-r from-orange-500 to-red-500 transition-all duration-500"
                          style={{ 
                            width: d.saldoInicial > 0 ? 
                              `${Math.min(((d.saldoInicial - d.saldoActual) / d.saldoInicial) * 100, 100)}%` : 
                              '0%'
                          }}
                        />
                      </div>
                    </div>
                  </div>
                ))}
                
                <div className="bg-gradient-to-r from-orange-100 to-red-100 rounded-xl p-5 mt-4">
                  <div className="grid sm:grid-cols-2 gap-4">
                    <div>
                      <p className="text-sm font-semibold text-gray-700">Total Deudas</p>
                      <p className="text-3xl font-bold text-orange-600">{totalDeudas.toFixed(0)} €</p>
                    </div>
                    <div>
                      <p className="text-sm font-semibold text-gray-700">Cuotas Mensuales</p>
                      <p className="text-3xl font-bold text-red-600">
                        {deudas.reduce((sum, d) => sum + d.cuotaMensual, 0).toFixed(0)} €
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        )}

        {/* VISTA OBJETIVOS */}
        {vistaActiva === 'objetivos' && (
          <div className="bg-white/95 backdrop-blur rounded-2xl shadow-xl p-6">
            <h2 className="text-2xl font-bold text-gray-800 mb-6 flex items-center gap-2">
              <Target className="text-pink-600" size={28} />
              Objetivos de Ahorro
            </h2>
            
            <div className="bg-gradient-to-r from-pink-50 to-purple-50 rounded-xl p-5 mb-6 border border-pink-200">
              <h3 className="font-semibold text-gray-800 mb-4">Crear Nuevo Objetivo</h3>
              <div className="grid sm:grid-cols-4 gap-3">
                <input
                  type="text"
                  placeholder="Nombre del objetivo"
                  value={nuevoObjetivo.nombre}
                  onChange={(e) => setNuevoObjetivo({...nuevoObjetivo, nombre: e.target.value})}
                  className="border-2 border-pink-300 rounded-xl px-4 py-2 focus:border-pink-500 focus:outline-none transition-colors"
                />
                <input
                  type="number"
                  placeholder="Meta €"
                  value={nuevoObjetivo.meta}
                  onChange={(e) => setNuevoObjetivo({...nuevoObjetivo, meta: e.target.value})}
                  className="border-2 border-pink-300 rounded-xl px-4 py-2 focus:border-pink-500 focus:outline-none transition-colors"
                />
                <input
                  type="number"
                  placeholder="Ahorrado €"
                  value={nuevoObjetivo.actual}
                  onChange={(e) => setNuevoObjetivo({...nuevoObjetivo, actual: e.target.value})}
                  className="border-2 border-pink-300 rounded-xl px-4 py-2 focus:border-pink-500 focus:outline-none transition-colors"
                />
                <button
                  onClick={añadirObjetivo}
                  className="bg-gradient-to-r from-pink-600 to-purple-600 hover:from-pink-700 hover:to-purple-700 text-white rounded-xl px-4 py-2 flex items-center justify-center gap-2 font-semibold transition-all transform hover:scale-105"
                >
                  <Plus size={20} /> Crear
                </button>
              </div>
            </div>

            {objetivos.length === 0 ? (
              <div className="text-center py-16 text-gray-500">
                <Target size={64} className="mx-auto mb-4 opacity-20" />
                <p className="text-lg">No tienes objetivos de ahorro</p>
                <p className="text-sm mt-2">Define metas para mantenerte motivado</p>
              </div>
            ) : (
              <div className="grid gap-4">
                {objetivos.map(obj => {
                  const progreso = (obj.actual / obj.meta) * 100;
                  const faltante = obj.meta - obj.actual;
                  
                  return (
                    <div key={obj.id} className="bg-gradient-to-r from-gray-50 to-white rounded-xl p-6 border border-gray-200 hover:shadow-lg transition-all">
                      <div className="flex justify-between items-start mb-4">
                        <div>
                          <h3 className="font-bold text-gray-800 text-xl">{obj.nombre}</h3>
                          <p className="text-sm text-gray-600 mt-1">
                            Ahorrado: 
                            <input
                              type="number"
                              value={obj.actual}
                              onChange={(e) => actualizarObjetivo(obj.id, e.target.value)}
                              className="ml-2 border-b-2 border-gray-300 w-24 text-center font-bold focus:border-purple-500 outline-none"
                            /> € de {obj.meta} €
                          </p>
                        </div>
                        <div className="text-right">
                          <span className="text-3xl font-bold" style={{ color: obj.color }}>
                            {progreso.toFixed(0)}%
                          </span>
                          <button
                            onClick={() => eliminarObjetivo(obj.id)}
                            className="block mt-2 text-red-500 hover:text-red-700 hover:bg-red-50 p-2 rounded-lg transition-all"
                          >
                            <Trash2 size={18} />
                          </button>
                        </div>
                      </div>
                      <div className="w-full bg-gray-200 rounded-full h-8 mb-3">
                        <div
                          className="h-8 rounded-full flex items-center justify-center text-white text-sm font-bold transition-all duration-500"
                          style={{ 
                            width: `${Math.min(progreso, 100)}%`, 
                            backgroundColor: obj.color,
                            background: `linear-gradient(to right, ${obj.color}dd, ${obj.color})`
                          }}
                        >
                          {progreso >= 15 && `${progreso.toFixed(0)}%`}
                        </div>
                      </div>
                      <div className="text-sm text-gray-600">
                        {progreso >= 100 ? (
                          <span className="text-green-600 font-bold">🎉 ¡Objetivo completado!</span>
                        ) : (
                          <span>Te faltan <span className="font-bold">{faltante.toFixed(2)} €</span> para alcanzar tu meta</span>
                        )}
                      </div>
                    </div>
                  );
                })}
                
                {objetivos.length > 0 && (
                  <div className="bg-gradient-to-r from-purple-100 to-pink-100 rounded-xl p-5 mt-4">
                    <div className="text-center">
                      <p className="text-sm font-semibold text-gray-700">Total en Objetivos</p>
                      <p className="text-3xl font-bold text-purple-600">
                        {objetivos.reduce((sum, o) => sum + o.actual, 0).toFixed(2)} €
                      </p>
                      <p className="text-sm text-gray-600 mt-2">
                        de {objetivos.reduce((sum, o) => sum + o.meta, 0).toFixed(2)} € en total
                      </p>
                    </div>
                  </div>
                )}
              </div>
            )}
          </div>
        )}

        {/* VISTA ESTADÍSTICAS */}
        {vistaActiva === 'estadisticas' && (
          <div className="grid lg:grid-cols-2 gap-6">
            <div className="bg-white/95 backdrop-blur rounded-2xl shadow-xl p-6">
              <h2 className="text-xl font-bold text-gray-800 mb-4 flex items-center gap-2">
                <PieChart className="text-purple-600" size={24} />
                Gastos por Categoría
              </h2>
              {dataPieChart.length === 0 ? (
                <div className="text-center py-12 text-gray-500">
                  <PieChart size={64} className="mx-auto mb-4 opacity-20" />
                  <p>No hay datos suficientes</p>
                  <p className="text-sm mt-2">Registra gastos para ver estadísticas</p>
                </div>
              ) : (
                <>
                  <ResponsiveContainer width="100%" height={300}>
                    <RPieChart>
                      <Pie
                        data={dataPieChart}
                        cx="50%"
                        cy="50%"
                        labelLine={false}
                        label={({ name, percent }) => `${(percent * 100).toFixed(0)}%`}
                        outerRadius={100}
                        fill="#8884d8"
                        dataKey="value"
                      >
                        {dataPieChart.map((entry, index) => (
                          <Cell key={`cell-${index}`} fill={entry.color} />
                        ))}
                      </Pie>
                      <Tooltip formatter={(value) => `${value.toFixed(2)} €`} />
                    </RPieChart>
                  </ResponsiveContainer>
                  <div className="mt-4 space-y-2">
                    {dataPieChart.map((cat, i) => (
                      <div key={i} className="flex justify-between items-center p-2 rounded-lg hover:bg-gray-50">
                        <div className="flex items-center gap-2">
                          <div 
                            className="w-4 h-4 rounded-full" 
                            style={{ backgroundColor: cat.color }}
                          />
                          <span className="text-sm font-medium">
                            {cat.icono} {cat.name}
                          </span>
                        </div>
                        <span className="font-bold">{cat.value.toFixed(2)} €</span>
                      </div>
                    ))}
                  </div>
                </>
              )}
            </div>

            <div className="bg-white/95 backdrop-blur rounded-2xl shadow-xl p-6">
              <h2 className="text-xl font-bold text-gray-800 mb-4 flex items-center gap-2">
                <BarChart3 className="text-purple-600" size={24} />
                Resumen Financiero
              </h2>
              <div className="space-y-4">
                <div className={`p-4 rounded-xl ${totalIngresos > 0 ? 'bg-gradient-to-r from-green-50 to-emerald-50' : 'bg-gray-50'}`}>
                  <div className="flex justify-between items-center">
                    <div className="flex items-center gap-2">
                      <TrendingUp className="text-green-600" size={20} />
                      <span className="font-semibold text-green-800">Ingresos</span>
                    </div>
                    <span className="text-2xl font-bold text-green-600">
                      {totalIngresos.toFixed(2)} €
                    </span>
                  </div>
                </div>
                
                <div className={`p-4 rounded-xl ${totalGastos > 0 ? 'bg-gradient-to-r from-red-50 to-pink-50' : 'bg-gray-50'}`}>
                  <div className="flex justify-between items-center">
                    <div className="flex items-center gap-2">
                      <TrendingDown className="text-red-600" size={20} />
                      <span className="font-semibold text-red-800">Gastos Totales</span>
                    </div>
                    <span className="text-2xl font-bold text-red-600">
                      {totalGastos.toFixed(2)} €
                    </span>
                  </div>
                  <div className="mt-2 pl-7 space-y-1">
                    <div className="flex justify-between text-sm">
                      <span className="text-gray-600">Fijos:</span>
                      <span className="font-semibold">{totalGastosFijos.toFixed(2)} €</span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span className="text-gray-600">Variables:</span>
                      <span className="font-semibold">{totalGastosVariables.toFixed(2)} €</span>
                    </div>
                  </div>
                </div>
                
                <div className={`p-4 rounded-xl ${
                  saldoDisponible >= 0 
                    ? 'bg-gradient-to-r from-blue-50 to-indigo-50' 
                    : 'bg-gradient-to-r from-orange-50 to-red-50'
                }`}>
                  <div className="flex justify-between items-center">
                    <div className="flex items-center gap-2">
                      <Wallet className={saldoDisponible >= 0 ? 'text-blue-600' : 'text-orange-600'} size={20} />
                      <span className={`font-semibold ${
                        saldoDisponible >= 0 ? 'text-blue-800' : 'text-orange-800'
                      }`}>
                        Balance Mensual
                      </span>
                    </div>
                    <span className={`text-2xl font-bold ${
                      saldoDisponible >= 0 ? 'text-blue-600' : 'text-orange-600'
                    }`}>
                      {saldoDisponible >= 0 ? '+' : ''}{saldoDisponible.toFixed(2)} €
                    </span>
                  </div>
                </div>
                
                {totalDeudas > 0 && (
                  <div className="p-4 rounded-xl bg-gradient-to-r from-orange-50 to-amber-50">
                    <div className="flex justify-between items-center">
                      <div className="flex items-center gap-2">
                        <CreditCard className="text-orange-600" size={20} />
                        <span className="font-semibold text-orange-800">Deudas Totales</span>
                      </div>
                      <span className="text-2xl font-bold text-orange-600">
                        {totalDeudas.toFixed(0)} €
                      </span>
                    </div>
                  </div>
                )}
                
                {/* Indicador de salud financiera */}
                <div className="mt-6 p-4 bg-gradient-to-r from-purple-100 to-pink-100 rounded-xl">
                  <h3 className="font-semibold text-gray-800 mb-3">Salud Financiera</h3>
                  <div className="space-y-2">
                    <div className="flex items-center gap-2">
                      {tasaAhorro >= 20 ? 
                        <CheckCircle className="text-green-500" size={16} /> :
                        tasaAhorro >= 10 ?
                        <AlertCircle className="text-yellow-500" size={16} /> :
                        <AlertCircle className="text-red-500" size={16} />
                      }
                      <span className="text-sm">
                        Tasa de ahorro: <span className="font-bold">{tasaAhorro.toFixed(1)}%</span>
                      </span>
                    </div>
                    <div className="flex items-center gap-2">
                      {totalDeudas === 0 ? 
                        <CheckCircle className="text-green-500" size={16} /> :
                        totalDeudas < totalIngresos * 0.3 ?
                        <AlertCircle className="text-yellow-500" size={16} /> :
                        <AlertCircle className="text-red-500" size={16} />
                      }
                      <span className="text-sm">
                        Nivel de endeudamiento: <span className="font-bold">
                          {totalIngresos > 0 ? `${((totalDeudas / totalIngresos) * 100).toFixed(1)}%` : '0%'}
                        </span>
                      </span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
