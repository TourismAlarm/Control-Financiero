'use client';

import { useState, useRef, useEffect } from 'react';
+
+import { useState, useRef, useEffect } from 'react';
 import { Plus, Trash2, Download, Upload, TrendingUp, TrendingDown, DollarSign, Wallet, PieChart, BarChart3, Target, Edit2, Save, X, Calendar, CreditCard, ShoppingCart, Home, PiggyBank, AlertCircle, CheckCircle } from 'lucide-react';
 import { PieChart as RPieChart, Pie, Cell, ResponsiveContainer, BarChart, Bar, XAxis, YAxis, Tooltip, Legend, LineChart, Line, Area, AreaChart } from 'recharts';
 
+const STORAGE_KEY = 'controlFinancieroEstado';
+const HISTORY_KEY = 'controlFinancieroHistorial';
+
 export default function ControlFinanciero() {
   const fileInputRef = useRef(null);
   
   // Estado inicial
   const [nombreUsuario, setNombreUsuario] = useState('');
   const [mesActual, setMesActual] = useState(new Date().toLocaleDateString('es-ES', { month: 'long', year: 'numeric' }));
   
   // Estado para notificaciones
   const [notificacion, setNotificacion] = useState({ show: false, mensaje: '', tipo: 'success' });
   
   // Ingresos (múltiples fuentes)
   const [ingresos, setIngresos] = useState([]);
   const [nuevoIngreso, setNuevoIngreso] = useState({ concepto: '', monto: '', tipo: 'Fijo' });
   
   // Gastos fijos mensuales
   const [gastosFijos, setGastosFijos] = useState([]);
  "use client";

  import React, { useState, useRef, useEffect } from "react";
  import {
    Plus,
    Trash2,
    Download,
    Upload,
    Save,
    Calendar,
    AlertCircle,
  } from "lucide-react";

  const STORAGE_KEY = "controlFinancieroEstado";
  const HISTORY_KEY = "controlFinancieroHistorial";

  export default function ControlFinanciero() {
    const fileInputRef = useRef(null);

    const [nombreUsuario, setNombreUsuario] = useState("");
    const [mesActual, setMesActual] = useState(
      new Date().toLocaleDateString("es-ES", { month: "long", year: "numeric" })
    );

    const [notificacion, setNotificacion] = useState({ show: false, mensaje: "", tipo: "success" });

    // Datos principales
    const [ingresos, setIngresos] = useState([]);
    const [nuevoIngreso, setNuevoIngreso] = useState({ concepto: "", monto: "", tipo: "Fijo" });

    const [gastosFijos, setGastosFijos] = useState([]);
    const [gastosVariables, setGastosVariables] = useState([]);
    const [deudas, setDeudas] = useState([]);
    const [objetivos, setObjetivos] = useState([]);

    const [historialMensual, setHistorialMensual] = useState([]);

    const [mostrarBienvenida, setMostrarBienvenida] = useState(true);

    useEffect(() => {
      if (typeof window === "undefined") return;
      try {
        const datos = localStorage.getItem(STORAGE_KEY);
        if (datos) {
          const parsed = JSON.parse(datos);
          setNombreUsuario(parsed.nombreUsuario || "");
          setMesActual(parsed.mesActual || mesActual);
          setIngresos(Array.isArray(parsed.ingresos) ? parsed.ingresos : []);
          setGastosFijos(Array.isArray(parsed.gastosFijos) ? parsed.gastosFijos : []);
          setGastosVariables(Array.isArray(parsed.gastosVariables) ? parsed.gastosVariables : []);
          setDeudas(Array.isArray(parsed.deudas) ? parsed.deudas : []);
          setObjetivos(Array.isArray(parsed.objetivos) ? parsed.objetivos : []);
          if (
            [parsed.ingresos, parsed.gastosFijos, parsed.gastosVariables, parsed.deudas, parsed.objetivos].some(
              (l) => Array.isArray(l) && l.length > 0
            )
          ) {
            setMostrarBienvenida(false);
          }
        }

        const hist = localStorage.getItem(HISTORY_KEY);
        if (hist) {
          const parsedH = JSON.parse(hist);
          if (Array.isArray(parsedH)) setHistorialMensual(parsedH);
        }
      } catch (e) {
        // eslint-disable-next-line no-console
        console.error("Error leyendo localStorage", e);
      }
    }, []);

    useEffect(() => {
      if (typeof window === "undefined") return;
      try {
        const estado = { nombreUsuario, mesActual, ingresos, gastosFijos, gastosVariables, deudas, objetivos };
        localStorage.setItem(STORAGE_KEY, JSON.stringify(estado));
      } catch (e) {
        // eslint-disable-next-line no-console
        console.error("Error guardando estado", e);
      }
    }, [nombreUsuario, mesActual, ingresos, gastosFijos, gastosVariables, deudas, objetivos]);

    useEffect(() => {
      if (typeof window === "undefined") return;
      try {
        localStorage.setItem(HISTORY_KEY, JSON.stringify(historialMensual));
      } catch (e) {
        // eslint-disable-next-line no-console
        console.error("Error guardando historial", e);
      }
    }, [historialMensual]);

    const mostrarNotificacion = (mensaje, tipo = "success") => {
      setNotificacion({ show: true, mensaje, tipo });
      setTimeout(() => setNotificacion({ show: false, mensaje: "", tipo: "success" }), 3000);
    };

    // Totales sencillos
    const totalIngresos = ingresos.reduce((s, it) => s + (parseFloat(it.monto) || 0), 0);
    const totalGastosFijos = gastosFijos.reduce((s, it) => s + (parseFloat(it.monto) || 0), 0);
    const totalGastosVariables = gastosVariables.reduce((s, it) => s + (parseFloat(it.monto) || 0), 0);
    const totalGastos = totalGastosFijos + totalGastosVariables;
    const saldoDisponible = totalIngresos - totalGastos;

    // CRUD - ingresos simple
    const añadirIngreso = () => {
      if (!nuevoIngreso.concepto || !nuevoIngreso.monto) return mostrarNotificacion("Completa concepto y monto", "error");
      const monto = parseFloat(nuevoIngreso.monto);
      if (Number.isNaN(monto) || monto <= 0) return mostrarNotificacion("Monto inválido", "error");
      const nuevo = { id: Date.now(), concepto: nuevoIngreso.concepto, monto, tipo: nuevoIngreso.tipo };
      setIngresos((p) => [...p, nuevo]);
      setNuevoIngreso({ concepto: "", monto: "", tipo: "Fijo" });
      setMostrarBienvenida(false);
      mostrarNotificacion("Ingreso añadido", "success");
    };

    const eliminarIngreso = (id) => {
      setIngresos((p) => p.filter((i) => i.id !== id));
      mostrarNotificacion("Ingreso eliminado", "info");
    };

    // Export / Import
    const exportarDatos = () => {
      try {
        const datos = { nombreUsuario, mesActual, ingresos, gastosFijos, gastosVariables, deudas, objetivos, historialMensual, fechaExportacion: new Date().toISOString() };
        const blob = new Blob([JSON.stringify(datos, null, 2)], { type: "application/json" });
        const url = URL.createObjectURL(blob);
        const a = document.createElement("a");
        a.href = url;
        a.download = `control-financiero-${mesActual.replace(/\s/g, "-")}-${Date.now()}.json`;
        a.click();
        URL.revokeObjectURL(url);
        mostrarNotificacion("Datos exportados", "success");
      } catch (e) {
        mostrarNotificacion("Error exportando datos", "error");
      }
    };

    const importarDatos = (ev) => {
      const file = ev.target.files && ev.target.files[0];
      if (!file) return;
      const reader = new FileReader();
      reader.onload = (e) => {
        try {
          const datos = JSON.parse(e.target.result);
          setNombreUsuario(datos.nombreUsuario || "");
          setMesActual(datos.mesActual || mesActual);
          setIngresos(Array.isArray(datos.ingresos) ? datos.ingresos : []);
          setGastosFijos(Array.isArray(datos.gastosFijos) ? datos.gastosFijos : []);
          setGastosVariables(Array.isArray(datos.gastosVariables) ? datos.gastosVariables : []);
          setDeudas(Array.isArray(datos.deudas) ? datos.deudas : []);
          setObjetivos(Array.isArray(datos.objetivos) ? datos.objetivos : []);
          setHistorialMensual(Array.isArray(datos.historialMensual) ? datos.historialMensual : []);
          mostrarNotificacion("Datos importados", "success");
          setMostrarBienvenida(false);
        } catch (e) {
          mostrarNotificacion("Archivo inválido", "error");
        }
      };
      reader.readAsText(file);
    };

    // Historial mensual básico
    const crearSnapshot = () => ({
      id: Date.now(),
      mes: mesActual,
      fechaGuardado: new Date().toISOString(),
      nombreUsuario,
      ingresos: ingresos.map((i) => ({ ...i })),
      gastosFijos: gastosFijos.map((g) => ({ ...g })),
      gastosVariables: gastosVariables.map((g) => ({ ...g })),
      deudas: deudas.map((d) => ({ ...d })),
      objetivos: objetivos.map((o) => ({ ...o })),
      totales: { totalIngresos, totalGastos, saldoDisponible },
    });

    const guardarHistorial = () => {
      const snap = crearSnapshot();
      setHistorialMensual((p) => {
        const index = p.findIndex((it) => (it.mes || "").toLowerCase() === (snap.mes || "").toLowerCase());
        if (index !== -1) {
          const copy = [...p];
          copy[index] = { ...snap, id: copy[index].id };
          mostrarNotificacion("Historial actualizado", "success");
          return copy;
        }
        mostrarNotificacion("Historial guardado", "success");
        return [...p, snap];
      });
    };

    const restaurarHistorial = (id) => {
      const reg = historialMensual.find((h) => h.id === id);
      if (!reg) return mostrarNotificacion("Registro no encontrado", "error");
      setNombreUsuario(reg.nombreUsuario || "");
      setMesActual(reg.mes || mesActual);
      setIngresos(Array.isArray(reg.ingresos) ? reg.ingresos : []);
      setGastosFijos(Array.isArray(reg.gastosFijos) ? reg.gastosFijos : []);
      setGastosVariables(Array.isArray(reg.gastosVariables) ? reg.gastosVariables : []);
      setDeudas(Array.isArray(reg.deudas) ? reg.deudas : []);
      setObjetivos(Array.isArray(reg.objetivos) ? reg.objetivos : []);
      setMostrarBienvenida(false);
      mostrarNotificacion(`Datos de ${reg.mes} restaurados`, "success");
    };

    const eliminarHistorial = (id) => {
      setHistorialMensual((p) => p.filter((h) => h.id !== id));
      mostrarNotificacion("Registro eliminado", "info");
    };

    return (
      <div className="min-h-screen p-4 bg-slate-50">
        {notificacion.show && (
          <div className={`fixed top-4 right-4 p-3 rounded shadow ${notificacion.tipo === "success" ? "bg-green-500" : notificacion.tipo === "error" ? "bg-red-500" : "bg-blue-500"}`}>
            <span className="text-white">{notificacion.mensaje}</span>
          </div>
        )}

        <header className="max-w-4xl mx-auto">
          <h1 className="text-2xl font-bold mb-2">Control Financiero</h1>
          <p className="text-sm text-gray-600 mb-4">Usuario: <strong>{nombreUsuario || 'Anónimo'}</strong> — Mes: <strong>{mesActual}</strong></p>
        </header>

        <main className="max-w-4xl mx-auto space-y-6">
          <section className="bg-white p-4 rounded shadow">
            <h2 className="font-semibold mb-2">Añadir ingreso</h2>
            <div className="flex gap-2">
              <input aria-label="concepto" placeholder="Concepto" value={nuevoIngreso.concepto} onChange={(e) => setNuevoIngreso({ ...nuevoIngreso, concepto: e.target.value })} className="border p-2 rounded flex-1" />
              <input aria-label="monto" placeholder="Monto" value={nuevoIngreso.monto} onChange={(e) => setNuevoIngreso({ ...nuevoIngreso, monto: e.target.value })} className="border p-2 rounded w-32" />
              <button onClick={añadirIngreso} className="bg-blue-600 text-white px-3 rounded inline-flex items-center gap-2"><Plus size={16} /> Añadir</button>
            </div>
          </section>

          <section className="bg-white p-4 rounded shadow">
            <h2 className="font-semibold mb-2">Ingresos</h2>
            {ingresos.length === 0 ? (
              <p className="text-sm text-gray-500">No hay ingresos registrados.</p>
            ) : (
              <ul className="space-y-2">
                {ingresos.map((i) => (
                  <li key={i.id} className="flex justify-between items-center border p-2 rounded">
                    <div>
                      <div className="font-medium">{i.concepto}</div>
                      <div className="text-sm text-gray-500">{i.tipo}</div>
                    </div>
                    <div className="flex items-center gap-2">
                      <div className="font-bold">{(i.monto || 0).toFixed(2)} €</div>
                      <button onClick={() => eliminarIngreso(i.id)} className="text-red-600"><Trash2 size={16} /></button>
                    </div>
                  </li>
                ))}
              </ul>
            )}
            <div className="mt-3 text-sm text-gray-700">Total ingresos: <strong>{totalIngresos.toFixed(2)} €</strong></div>
          </section>

          <section className="bg-white p-4 rounded shadow">
            <h2 className="font-semibold mb-2">Historial mensual</h2>
            <div className="flex gap-2">
              <button onClick={guardarHistorial} className="bg-purple-600 text-white px-3 py-2 rounded inline-flex items-center gap-2"><Save size={16} /> Guardar mes</button>
              <button onClick={exportarDatos} className="bg-green-600 text-white px-3 py-2 rounded inline-flex items-center gap-2"><Download size={16} /> Exportar</button>
              <button onClick={() => fileInputRef.current && fileInputRef.current.click()} className="bg-gray-200 px-3 py-2 rounded inline-flex items-center gap-2"><Upload size={16} /> Importar</button>
              <input ref={fileInputRef} type="file" accept="application/json" onChange={importarDatos} className="hidden" />
            </div>

            {historialMensual.length === 0 ? (
              <p className="text-sm text-gray-500 mt-3">Aún no hay registros. Guarda el mes actual para empezar.</p>
            ) : (
              <ul className="mt-3 space-y-2">
                {[...historialMensual].slice().reverse().map((h) => (
                  <li key={h.id} className="border rounded p-2 flex justify-between items-center">
                    <div>
                      <div className="font-medium">{h.mes}</div>
                      <div className="text-xs text-gray-500">Guardado: {new Date(h.fechaGuardado).toLocaleString()}</div>
                    </div>
                    <div className="flex gap-2">
                      <button onClick={() => restaurarHistorial(h.id)} className="px-2 py-1 border rounded text-sm">Restaurar</button>
                      <button onClick={() => eliminarHistorial(h.id)} className="px-2 py-1 border rounded text-sm text-red-600">Eliminar</button>
                    </div>
                  </li>
                ))}
              </ul>
            )}
          </section>

          <section className="bg-white p-4 rounded shadow">
            <h2 className="font-semibold mb-2">Resumen</h2>
            <div className="grid grid-cols-1 sm:grid-cols-3 gap-3">
              <div className="p-3 bg-green-50 rounded">Ingresos: <div className="font-bold">{totalIngresos.toFixed(2)} €</div></div>
              <div className="p-3 bg-red-50 rounded">Gastos: <div className="font-bold">{totalGastos.toFixed(2)} €</div></div>
              <div className="p-3 bg-blue-50 rounded">Balance: <div className="font-bold">{saldoDisponible.toFixed(2)} €</div></div>
            </div>
          </section>
        </main>
      </div>
    );
  }
       nombreUsuario,
       mesActual,
       ingresos,
       gastosFijos,
       gastosVariables,
       deudas,
       objetivos,
+      historialMensual,
       totales: {
         totalIngresos,
         totalGastosFijos,
         totalGastosVariables,
         totalGastos,
         saldoDisponible,
         totalDeudas
       },
       fechaExportacion: new Date().toISOString()
     };
     
     const dataStr = JSON.stringify(datos, null, 2);
     const dataBlob = new Blob([dataStr], { type: 'application/json' });
     const url = URL.createObjectURL(dataBlob);
     const link = document.createElement('a');
     link.href = url;
     const nombreArchivo = `control-financiero-${mesActual.replace(/\s/g, '-')}-${Date.now()}.json`;
     link.download = nombreArchivo;
     link.click();
     mostrarNotificacion('Datos exportados correctamente', 'success');
   };
   
   // Importar datos
   const importarDatos = (event) => {
     const file = event.target.files[0];
     if (file) {
       const reader = new FileReader();
       reader.onload = (e) => {
         try {
           const datos = JSON.parse(e.target.result);
           setNombreUsuario(datos.nombreUsuario || '');
           setMesActual(datos.mesActual || '');
           setIngresos(datos.ingresos || []);
           setGastosFijos(datos.gastosFijos || []);
           setGastosVariables(datos.gastosVariables || []);
           setDeudas(datos.deudas || []);
           setObjetivos(datos.objetivos || []);
+          setHistorialMensual(Array.isArray(datos.historialMensual) ? datos.historialMensual : []);
           mostrarNotificacion('Datos importados correctamente', 'success');
           setMostrarBienvenida(false);
         } catch (error) {
           mostrarNotificacion('Error al importar. Verifica que sea un archivo válido', 'error');
         }
       };
       reader.readAsText(file);
     }
   };
   
   // Auto-hide bienvenida si hay datos
   useEffect(() => {
     if (ingresos.length > 0 || gastosFijos.length > 0) {
       setMostrarBienvenida(false);
     }
   }, [ingresos, gastosFijos]);
 
   return (
     <div className="min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-900 p-2 sm:p-4">
       {/* Notificaciones */}
       {notificacion.show && (
         <div className={`fixed top-4 right-4 z-50 animate-pulse transition-all duration-300 ${
           notificacion.tipo === 'success' ? 'bg-green-500' :
           notificacion.tipo === 'error' ? 'bg-red-500' :
           'bg-blue-500'
diff --git a/Index b/components/ControlFinanciero.jsx
index 8bdd027c6eb345b92a071edb3c831caf9d2f66be..2e63bd44fdf0b4928b46c68ff2de640f6535294f 100644
--- a/Index
+++ b/components/ControlFinanciero.jsx
@@ -605,50 +779,128 @@ export default function ControlFinanciero() {
                           <div className="w-full bg-gray-200 rounded-full h-2">
                             <div
                               className="h-2 rounded-full transition-all duration-500"
                               style={{ 
                                 width: `${Math.min(progreso, 100)}%`, 
                                 backgroundColor: obj.color 
                               }}
                             />
                           </div>
                         </div>
                       );
                     })}
                     {objetivos.length > 3 && (
                       <button 
                         onClick={() => setVistaActiva('objetivos')}
                         className="text-purple-600 hover:underline text-sm"
                       >
                         Ver todos ({objetivos.length}) →
                       </button>
                     )}
                   </div>
                 )}
               </div>
             </div>
 
+            {/* Historial mensual */}
+            <div className="bg-white/95 backdrop-blur rounded-2xl shadow-xl p-6 mt-6">
+              <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
+                <div>
+                  <h3 className="text-lg font-bold text-gray-800 flex items-center gap-2">
+                    <Calendar className="text-purple-600" size={20} />
+                    Historial mensual
+                  </h3>
+                  <p className="text-sm text-gray-500">Guarda un resumen al cerrar cada mes y compáralo a futuro.</p>
+                </div>
+                <button
+                  onClick={guardarHistorialMensual}
+                  className="inline-flex items-center justify-center gap-2 bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white px-4 py-2 rounded-xl font-semibold transition-all transform hover:scale-105"
+                >
+                  <Save size={18} /> Guardar mes actual
+                </button>
+              </div>
+
+              {historialOrdenado.length === 0 ? (
+                <div className="text-center py-10 text-gray-500">
+                  <Calendar size={48} className="mx-auto mb-4 opacity-30" />
+                  <p>No hay registros guardados todavía.</p>
+                  <p className="text-sm mt-2">Guarda el mes actual para empezar tu historial anual.</p>
+                </div>
+              ) : (
+                <div className="mt-6 space-y-4">
+                  {historialOrdenado.map(registro => {
+                    const totales = registro.totales || {};
+                    return (
+                      <div key={registro.id} className="border border-gray-200 rounded-2xl p-4 bg-white/90 hover:shadow-lg transition-all">
+                        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3">
+                          <div>
+                            <p className="text-xs uppercase tracking-wide text-gray-500">Guardado el {formatearFecha(registro.fechaGuardado)}</p>
+                            <h4 className="text-2xl font-bold text-gray-800 capitalize">{registro.mes}</h4>
+                          </div>
+                          <div className="flex items-center gap-2">
+                            <button
+                              onClick={() => restaurarHistorialMes(registro.id)}
+                              className="inline-flex items-center gap-2 px-3 py-2 rounded-xl border border-purple-200 text-purple-600 hover:bg-purple-50 transition-colors"
+                            >
+                              <Upload size={16} /> Restaurar
+                            </button>
+                            <button
+                              onClick={() => eliminarHistorialMes(registro.id)}
+                              className="inline-flex items-center gap-2 px-3 py-2 rounded-xl border border-red-200 text-red-600 hover:bg-red-50 transition-colors"
+                            >
+                              <Trash2 size={16} /> Eliminar
+                            </button>
+                          </div>
+                        </div>
+
+                        <div className="grid sm:grid-cols-2 lg:grid-cols-4 gap-3 mt-4 text-sm">
+                          <div className="bg-green-50 rounded-xl p-3">
+                            <p className="text-xs text-green-700 font-semibold">Ingresos</p>
+                            <p className="text-xl font-bold text-green-600">{(totales.totalIngresos || 0).toFixed(2)} €</p>
+                          </div>
+                          <div className="bg-red-50 rounded-xl p-3">
+                            <p className="text-xs text-red-700 font-semibold">Gastos</p>
+                            <p className="text-xl font-bold text-red-600">{(totales.totalGastos || 0).toFixed(2)} €</p>
+                          </div>
+                          <div className="bg-blue-50 rounded-xl p-3">
+                            <p className="text-xs text-blue-700 font-semibold">Balance</p>
+                            <p className={`text-xl font-bold ${ (totales.saldoDisponible || 0) >= 0 ? 'text-blue-600' : 'text-orange-600' }`}>
+                              {(totales.saldoDisponible || 0).toFixed(2)} €
+                            </p>
+                          </div>
+                          <div className="bg-orange-50 rounded-xl p-3">
+                            <p className="text-xs text-orange-700 font-semibold">Deudas</p>
+                            <p className="text-xl font-bold text-orange-600">{(totales.totalDeudas || 0).toFixed(2)} €</p>
+                          </div>
+                        </div>
+                      </div>
+                    );
+                  })}
+                </div>
+              )}
+            </div>
+
             {/* Tips financieros */}
             <div className="bg-gradient-to-r from-purple-600 to-pink-600 rounded-2xl shadow-xl p-6 mt-6 text-white">
               <h3 className="text-xl font-bold mb-4 flex items-center gap-2">
                 <AlertCircle size={24} />
                 Consejos Financieros
               </h3>
               <div className="grid sm:grid-cols-2 lg:grid-cols-3 gap-4">
                 <div className="bg-white/20 backdrop-blur rounded-xl p-4">
                   <div className="text-2xl mb-2">💡</div>
                   <p className="text-sm">
                     {tasaAhorro < 10 ? 
                       'Intenta ahorrar al menos el 10% de tus ingresos' :
                       `¡Excelente! Estás ahorrando el ${tasaAhorro.toFixed(0)}% de tus ingresos`
                     }
                   </p>
                 </div>
                 <div className="bg-white/20 backdrop-blur rounded-xl p-4">
                   <div className="text-2xl mb-2">📊</div>
                   <p className="text-sm">
                     {gastosVariables.length < 5 ?
                       'Registra todos tus gastos para tener un control real' :
                       'Buen trabajo registrando tus gastos diarios'
                     }
                   </p>
                 </div>
